System.register(["cc"], function (_export, _context) {
  "use strict";

  var _cclegacy, __checkObsolete__, __checkObsoleteInNamespace__, _decorator, Component, _dec, _class, _class2, _crd, ccclass, property, GameShulteStartView;

  return {
    setters: [function (_cc) {
      _cclegacy = _cc.cclegacy;
      __checkObsolete__ = _cc.__checkObsolete__;
      __checkObsoleteInNamespace__ = _cc.__checkObsoleteInNamespace__;
      _decorator = _cc._decorator;
      Component = _cc.Component;
    }],
    execute: function () {
      _crd = true;

      _cclegacy._RF.push({}, "2b0c1wHzw5NY4T6FeB5wXbq", "GameShulteStartView", undefined);

      __checkObsolete__(['_decorator', 'Component', 'Node']);

      ({
        ccclass,
        property
      } = _decorator);

      _export("GameShulteStartView", GameShulteStartView = (_dec = ccclass('GameShulteStartView'), _dec(_class = (_class2 = class GameShulteStartView extends Component {
        constructor(...args) {
          super(...args);
          this._beginEntity = void 0;
          this._gameStartEntity = void 0;
          this._gameContainer = void 0;
          this._itemEntitys = [];
          this._ctrl = void 0;
          // private _ap:AudioPlayer;
          this._resultEntity = void 0;
          this._txtTime = void 0;
          this._txtResultTime = void 0;
          this._errorAnim = void 0;
          this._indexList = [];
          this._curType = void 0;
          this._num = void 0;
          this._time = 0;
          this._deltaTime = 0;
          this._isOver = true;
          this._curClickIdx = 0;
          this._clickRight = void 0;
        }

        onAwake() {
          this._ctrl = this.entity.getComponent(GameShulteBegin);
        }

        update(deltaTime) {}

        start() {
          this._beginEntity = GameUI.FindChild(this.entity, "Begin");
          this._gameStartEntity = GameUI.FindChild(this.entity, "GameStart");
          this._gameContainer = GameUI.FindChild(this.entity, "GameStart/Group/GridGroup").transform2D; // this._ap = Main.FindChild(this.entity,"Sound",AudioPlayer);

          this._resultEntity = GameUI.FindChild(this.entity, "GameStart/Result");
          this._txtTime = GameUI.FindChild(this.entity, "GameStart/txtTime", engine.UILabel);
          this._txtResultTime = GameUI.FindChild(this._resultEntity, "txtResultTime", engine.UILabel);
          this._errorAnim = GameUI.FindChild(this.entity, "GameStart/imgError", engine.Animation);
          let self = this;
          let btnExit = GameUI.FindChild(this.entity, "GameStart/btnExit", engine.UIButton);
          btnExit.onClick.add(function () {
            //退出游戏
            self.gameExit();
          });
          let btnAgain = GameUI.FindChild(this._resultEntity, "btnAgain", engine.UIButton);
          btnAgain.onClick.add(function () {
            //再来一次
            self.playAgain();
          });
        }

        onUpdate(dt) {
          if (this._isOver) return;
          this._deltaTime += dt; //Time.deltaTime;

          if (this._deltaTime >= 0.1) {
            this._time += this._deltaTime;
            let showTime = Math.floor(this._time * 1000) / 1000;
            this._txtTime.text = showTime + "S";
            this._deltaTime = 0;
          }
        }

        onDestroy() {}

        playAgain() {
          this._resultEntity.active = false;
          this._isOver = false;
          this.updatePosition();
        }

        gameExit() {
          this._curClickIdx = 0;
          this._isOver = true;
          this._indexList = [];
          this.clearItemGrid();
          this._txtTime.text = "";
          this._deltaTime = 0;
          this._time = 0;
          this._resultEntity.active = false;
          this._gameStartEntity.active = false;
          this._beginEntity.active = true;

          this._ctrl.gameExit();
        }

        gameOver() {
          this._curClickIdx = 0;
          this._isOver = true;
          this._resultEntity.active = true;
          this._time = Math.floor(this._time * 1000) / 1000;
          this._txtResultTime.text = "您的成绩是：" + this._time + "秒";
          this._txtTime.text = "";
          this._deltaTime = 0;
          this._time = 0;
        }

        onItemClick(clickIdx) {
          if (this._curClickIdx != clickIdx) {
            this._errorAnim.play("ClickError", 0, engine.Animation.WrapMode.Once); //Play("ClickError", -1, 0);
            // this._curClickIdx = 0;//点错一次是否重置点击


            let stopLast = true;

            if (this._clickRight) {
              //上次点击如果是正确的，音效不要中断播放
              stopLast = false;
            }

            Mgr.soundMgr.play("error1", stopLast);
            this._clickRight = false;
          } else {
            //right
            this._curClickIdx++;
            this._itemEntitys[clickIdx].active = false;

            if (this._curClickIdx >= this._num) {
              this.gameOver();
              Mgr.soundMgr.play("win");
            } else {
              let stopLast = true;

              if (!this._clickRight) {
                //上次点击如果是错误的，音效不要中断播放
                stopLast = false;
              }

              Mgr.soundMgr.play("button1", stopLast);
            }

            this._clickRight = true;
          }
        }

        updateGrid() {
          this._isOver = false;
          let curType = this._curType; // let offset = this._systemInfo.screenWidth / 1080;

          let width = this._gameContainer.sizeX;
          let curSize = Math.floor(width / curType); // * offset;

          let self = this;

          for (let i = 0; i < this._num; i++) {
            this._indexList.push(i);

            let itemEntity = this.getItemGrid();
            itemEntity.active = true;

            this._gameContainer.addChild(itemEntity.transform2D);

            itemEntity.transform2D.sizeX = curSize;
            itemEntity.transform2D.sizeY = curSize;
            itemEntity.getComponent(ItemGird).setIndex(i);

            this._itemEntitys.push(itemEntity);

            let btnCom = itemEntity.getComponent(engine.UIButton);
            btnCom.onClick.clear();
            btnCom.onClick.add(function () {
              self.onItemClick(i);
            });
          }

          this.updatePosition();
        }

        updatePosition() {
          let curType = this._curType;
          let width = this._gameContainer.sizeX;
          let curSize = Math.floor(width / curType);
          let showList = [];

          for (let i = 0; i < this._num; i++) {
            let itemEntity = this._itemEntitys[i];

            if (!itemEntity.active) {
              itemEntity.active = true;
            }

            let randomIdx = Math.floor(this._indexList.length * Math.random());

            let showIdx = this._indexList.splice(randomIdx, 1)[0];

            showList.push(showIdx);
            let col = showIdx % curType;
            let row = Math.floor(showIdx / curType);
            let x = col * curSize;
            let y = row * -curSize;
            itemEntity.transform2D.position.x = x;
            itemEntity.transform2D.position.y = y;
          }

          this._indexList = showList;
        }

        getItemGrid() {
          let entity = GameShulteStart.ITEM_POOL.pop();

          if (!entity) {
            let prefabAsset = engine.loader.getAsset("Resources/Prefabs/ItemGrid.prefab");

            if (prefabAsset) {
              entity = prefabAsset.instantiate();
            } else {
              console.log("找不到资源");
            }
          }

          return entity;
        }

        clearItemGrid() {
          for (let i = 0; i < this._itemEntitys.length; i++) {
            let entity = this._itemEntitys[i];
            entity.active = false;
            GameShulteStart.ITEM_POOL.push(entity);
          }

          this._itemEntitys = [];
        }

        startGame(type) {
          this._curType = type;
          this._num = type * type;
          let url = 'Resources/Prefabs/ItemGrid.prefab';

          if (engine.loader.getAsset(url)) {
            this.updateGrid();
          } else {
            let self = this;
            engine.loader.load(url).promise.then(prefabAsset => {
              // 将 prefab 资源实例化
              console.log("#######加载成功");
              self.updateGrid();
            });
          }
        }

      }, _class2.ITEM_POOL = [], _class2)) || _class));

      _cclegacy._RF.pop();

      _crd = false;
    }
  };
});
//# sourceMappingURL=6e9fc054646bb8419be1fd70897c26a0958e8cb6.js.map