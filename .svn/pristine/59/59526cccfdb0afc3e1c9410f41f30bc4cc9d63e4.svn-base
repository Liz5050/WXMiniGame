System.register([], function (_export, _context) {
  "use strict";

  var EventManager, _crd;

  _export("EventManager", void 0);

  return {
    setters: [],
    execute: function () {
      _crd = true;

      /**
       * 事件管理
       */
      _export("EventManager", EventManager = class EventManager {
        /**
            * 添加消息监听
            * @param name 消息唯一标识
            * @param listener 侦听函数
            * @param listenerObj 侦听函数所属对象
            *
            */
        static addListener(name, listener, listenerObj) {
          if (!name) {
            return;
          }

          if (this.events[name] == null) {
            this.events[name] = [];
          }

          if (!this.isExist(name, listener, listenerObj)) {
            this.events[name].push({
              "listener": listener,
              "listenerObj": listenerObj
            });
          }
        }
        /**
            * 移除消息监听
            * @param name 消息唯一标识
            * @param listener 侦听函数
            * @param listenerObj 侦听函数所属对象
            */


        static removeListener(name, listener, listenerObj) {
          if (!name) {
            return;
          }

          let arr = this.events[name];

          if (arr == null) {
            return;
          }

          let i = 0;
          let len = arr.length;

          for (i; i < len; i++) {
            if (arr[i]["listener"] == listener && arr[i]["listenerObj"] == listenerObj) {
              arr.splice(i, 1);
              break;
            }
          }

          if (arr.length == 0) {
            this.events[name] = null;
            delete this.events[name];
          }
        }
        /**
         * 消息是否存在
         */


        static isExist(name, listener, listenerObj) {
          let isExist = false;
          let oneEvents = this.events[name];

          if (oneEvents != null) {
            for (let d of oneEvents) {
              if (d['listener'] == listener && d['listenerObj'] == listenerObj) {
                isExist = true;
                break;
              }
            }
          }

          return isExist;
        }
        /**
         * 分派事件
         */


        static dispatch(name, ...params) {
          if (!name) {
            return;
          }

          let oneEvents = this.events[name];

          if (oneEvents != null) {
            let event;

            for (let i = oneEvents.length - 1; i >= 0; i--) {
              event = oneEvents[i];

              if (event != null && event.hasOwnProperty("listener")) {
                event['listener'].apply(event['listenerObj'], params);
              }
            }
          }
        }

        static clear() {
          this.events = {};
        }

      });

      EventManager.events = {};
      _crd = false;
    }
  };
});
//# sourceMappingURL=682e471801696689f1fc2a57c8872d1acceb4fe5.js.map