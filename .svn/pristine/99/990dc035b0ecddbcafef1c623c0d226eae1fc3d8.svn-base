System.register(["cc"], function (_export, _context) {
  "use strict";

  var _cclegacy, __checkObsolete__, __checkObsoleteInNamespace__, _decorator, director, utils, SceneManager, _crd, ccclass, property;

  _export("SceneManager", void 0);

  return {
    setters: [function (_cc) {
      _cclegacy = _cc.cclegacy;
      __checkObsolete__ = _cc.__checkObsolete__;
      __checkObsoleteInNamespace__ = _cc.__checkObsoleteInNamespace__;
      _decorator = _cc._decorator;
      director = _cc.director;
      utils = _cc.utils;
    }],
    execute: function () {
      _crd = true;

      _cclegacy._RF.push({}, "5287a+137ZKS7NBKEmKaYDr", "SceneManager", undefined);

      __checkObsolete__(['_decorator', 'Component', 'director', 'Node', 'Scene', 'utils']);

      ({
        ccclass,
        property
      } = _decorator);

      _export("SceneManager", SceneManager = class SceneManager {
        constructor() {
          this._mainSceneNode = void 0;
          this._mainSceneNode = utils.find("Canvas");
          director.addPersistRootNode(this._mainSceneNode);
          director.getScene().getParent();
        }

        LoadScene(sceneName) {
          var self = this;
          director.loadScene(sceneName, function (error, scene) {
            if (self._mainSceneNode.parent != scene) {
              self._mainSceneNode.active = false;
            } else {
              self._mainSceneNode.active = true;
            }
          });
        }

      });

      _cclegacy._RF.pop();

      _crd = false;
    }
  };
});
//# sourceMappingURL=eca93ddbf6bb0e94d32490078ffc6387581da34a.js.map