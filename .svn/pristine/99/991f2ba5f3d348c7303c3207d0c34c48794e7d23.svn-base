System.register(["__unresolved_0", "cc", "__unresolved_1", "__unresolved_2", "engine", "__unresolved_3", "__unresolved_4"], function (_export, _context) {
  "use strict";

  var _reporterNs, _cclegacy, EventEnum, EventManager, engine, GameUI, GameType, GameShulteController, _crd;

  function _reportPossibleCrUseOfEventEnum(extras) {
    _reporterNs.report("EventEnum", "../../Enum/EventEnum", _context.meta, extras);
  }

  function _reportPossibleCrUseOfEventManager(extras) {
    _reporterNs.report("EventManager", "../../Manager/EventManager", _context.meta, extras);
  }

  function _reportPossibleCrUseOfengine(extras) {
    _reporterNs.report("engine", "engine", _context.meta, extras);
  }

  function _reportPossibleCrUseOfGameUI(extras) {
    _reporterNs.report("GameUI", "../../Utils/GameUI", _context.meta, extras);
  }

  function _reportPossibleCrUseOfGameType(extras) {
    _reporterNs.report("GameType", "../../Enum/GameType", _context.meta, extras);
  }

  _export("default", void 0);

  return {
    setters: [function (_unresolved_) {
      _reporterNs = _unresolved_;
    }, function (_cc) {
      _cclegacy = _cc.cclegacy;
    }, function (_unresolved_2) {
      EventEnum = _unresolved_2.EventEnum;
    }, function (_unresolved_3) {
      EventManager = _unresolved_3.EventManager;
    }, function (_engine) {
      engine = _engine.default;
    }, function (_unresolved_4) {
      GameUI = _unresolved_4.default;
    }, function (_unresolved_5) {
      GameType = _unresolved_5.GameType;
    }],
    execute: function () {
      _crd = true;

      _cclegacy._RF.push({}, "59f13/t6UNLnJ1PSQSruRSx", "GameGridController", undefined);

      _export("default", GameShulteController = class GameShulteController {
        constructor() {
          this._gameShulteEntity = void 0;
          this.init();
        }

        init() {
          (_crd && EventManager === void 0 ? (_reportPossibleCrUseOfEventManager({
            error: Error()
          }), EventManager) : EventManager).addListener((_crd && EventEnum === void 0 ? (_reportPossibleCrUseOfEventEnum({
            error: Error()
          }), EventEnum) : EventEnum).OnGameStart, this.onGameStart, this);
        }

        onGameStart(type) {
          if (type != (_crd && GameType === void 0 ? (_reportPossibleCrUseOfGameType({
            error: Error()
          }), GameType) : GameType).Shulte) return;

          if (!this._gameShulteEntity) {
            this._gameShulteEntity = (_crd && GameUI === void 0 ? (_reportPossibleCrUseOfGameUI({
              error: Error()
            }), GameUI) : GameUI).FindChild((_crd && engine === void 0 ? (_reportPossibleCrUseOfengine({
              error: Error()
            }), engine) : engine).game.activeScene2D.root, "Main/GameManager/GameContainer/GameShulte");
          }

          this._gameShulteEntity.active = true;
        }

      });

      _cclegacy._RF.pop();

      _crd = false;
    }
  };
});
//# sourceMappingURL=3250845c9019b01e46fe956168a50bc6b4f0b094.js.map