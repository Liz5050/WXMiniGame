System.register(["cc"], function (_export, _context) {
  "use strict";

  var _cclegacy, __checkObsolete__, __checkObsoleteInNamespace__, _decorator, Component, Label, math, Sprite, _dec, _class, _crd, ccclass, property, ShulteGridItem;

  return {
    setters: [function (_cc) {
      _cclegacy = _cc.cclegacy;
      __checkObsolete__ = _cc.__checkObsolete__;
      __checkObsoleteInNamespace__ = _cc.__checkObsoleteInNamespace__;
      _decorator = _cc._decorator;
      Component = _cc.Component;
      Label = _cc.Label;
      math = _cc.math;
      Sprite = _cc.Sprite;
    }],
    execute: function () {
      _crd = true;

      _cclegacy._RF.push({}, "8921fJ0vHxORqhK3GZl92yR", "ShulteGridItem", undefined);

      __checkObsolete__(['_decorator', 'Component', 'Label', 'math', 'Sprite']);

      ({
        ccclass,
        property
      } = _decorator);

      _export("ShulteGridItem", ShulteGridItem = (_dec = ccclass('ShulteGridItem'), _dec(_class = class ShulteGridItem extends Component {
        constructor(...args) {
          super(...args);
          this._index = void 0;
          this._txtNum = void 0;
        }

        onLoad() {
          let r = Math.floor((3 * Math.random() + 5) / 10 * 255); //0.5-0.8

          let g = Math.floor((2 * Math.random() + 7) / 10 * 255); //0.7-0.9

          let b = Math.floor((1.5 * Math.random() + 8) / 10 * 255); //0.8-0.95

          console.log("itemGrid onAwake=====r:" + r + "  ===g:" + g + "  ===b" + b); // gameObject.GetComponent<Image>().color = new Color(r,g,b); 

          let sp = this.getComponent(Sprite);
          sp.color = new math.Color(r, g, b);
          this._txtNum = this.node.getChildByName("txtNum").getComponent(Label);
        }

        update(deltaTime) {}

        setIndex(index) {
          this._index = index;
          this._txtNum.string = (index + 1).toString();
        }

      }) || _class));

      _cclegacy._RF.pop();

      _crd = false;
    }
  };
});
//# sourceMappingURL=34f885b5366cc68f62dd2d5e0cac0907fae94dcd.js.map