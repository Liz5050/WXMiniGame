System.register(["cc"], function (_export, _context) {
  "use strict";

  var _cclegacy, __checkObsolete__, __checkObsoleteInNamespace__, GTween, TweenManager, _crd;

  _export("default", void 0);

  return {
    setters: [function (_cc) {
      _cclegacy = _cc.cclegacy;
      __checkObsolete__ = _cc.__checkObsolete__;
      __checkObsoleteInNamespace__ = _cc.__checkObsoleteInNamespace__;
    }],
    execute: function () {
      _crd = true;

      _cclegacy._RF.push({}, "da12cDhFVtHvL4JEX8vVU8W", "TweenManager", undefined);

      /**
       * 对象池管理缓动
       * @author Liz 2019年4月18日21:10:57
       */
      __checkObsolete__(['_decorator']);

      GTween = class GTween {
        constructor() {
          this._target = void 0;
          this._steps = void 0;
          this._initialProps = void 0;
          this._stepProps = void 0;
          this._isStart = false;
          this._stepTime = void 0;
          this._curStep = void 0;
          this._lastStep = void 0;
          this._loop = false;
          this._stepIdx = 0;
          this._onChange = void 0;
          this._onChangeObj = void 0;
          this.timeIndex = -1;
        }

        setProps(props) {
          if (!props) return;
          this._loop = props.loop == true;
          this._onChange = props.onChange;
          this._onChangeObj = props.onChangeObj;
        }

        setTarget(t) {
          this._target = t;
          this._initialProps = {};
        }

        getTarget() {
          return this._target;
        }

        to(props, duration, ease) {
          if (!this._target) return;
          if (!props || typeof props != "object") return;

          if (!duration || duration < 0) {
            return;
          }

          for (let key in props) {
            this._initialProps[key] = props[key];
          }

          this.addStep({
            type: "to",
            props: props,
            duration: duration,
            ease: ease
          });
          return this;
        }

        call(callback, thisObj, params) {
          this.addStep({
            type: "call",
            callBack: callback,
            thisObj: thisObj,
            params: params
          });
          return this;
        }

        wait(time) {
          this.addStep({
            type: "wait",
            duration: time
          });
          return this;
        }

        addStep(step) {
          if (!this._steps) {
            this._steps = [];
          }

          this._steps.push(step);

          this.beginTween();
        }

        beginTween() {
          if (this._isStart) return;
          this._isStart = true;
          this.getStep();
        }

        getStep() {
          if (!this._isStart) return;

          if (this._loop) {
            if (this._stepIdx >= this._steps.length) {
              this._stepIdx = 0;

              for (let key in this._initialProps) {
                this._target[key] = this._initialProps[key];
              }
            }

            this._curStep = this._steps[this._stepIdx];
            this._stepIdx++;
          } else {
            this._curStep = this._steps.shift();
          } //属性校正


          if (this._lastStep && this._lastStep.props) {
            for (let key in this._lastStep.props) {
              this._target[key] = this._lastStep.props[key];
            }
          }

          this._lastStep = this._curStep;

          if (!this._curStep) {
            this.stopAction();
            return;
          }

          if (this._curStep.type == "call") {
            this._curStep.callBack.apply(this._curStep.thisObj, this._curStep.params);

            this.getStep();
            return;
          }

          this._stepTime = decorator.game.gameTime + this._curStep.duration;
          this._stepProps = {};
          this.runAction();
        }

        runAction() {
          if (this.timeIndex == -1) {
            let self = this;
            this.timeIndex = engine.timer.setInterval(function () {
              let curTime = engine.game.gameTime;

              if (curTime >= self._stepTime) {
                self.getStep();
                return;
              }

              if (self._curStep.type == "to") {
                let props = self._curStep.props;
                let ratio = (self._curStep.duration - (self._stepTime - curTime)) / self._curStep.duration;
                ratio = Math.min(ratio, 1);

                if (self._curStep.ease) {
                  ratio = self._curStep.ease(ratio, 0, 1, 1);
                }

                for (let keyName in props) {
                  if (self._stepProps[keyName] == undefined) {
                    self._stepProps[keyName] = self._target[keyName];
                  }

                  let diff = props[keyName] - self._stepProps[keyName];
                  self._target[keyName] = self._stepProps[keyName] + diff * ratio; // if(keyName == "scaleX" || keyName == "scaleY") {
                  // 	console.log(keyName + "-->dis : " + dis,"ratio : " + ratio,"step初始：",this._stepProps[keyName],"当前：",this._target[keyName]);
                  // }
                  // console.log(keyName + "-->dis : " + dis,"ratio : " + ratio);
                }
              }

              if (self._onChange && self._onChangeObj) {
                self._onChange.apply(self._onChangeObj);
              }
            }, 1);
          }
        }

        stopAction() {
          if (!this._isStart) return;

          if (this._target.gtween_count > 0) {
            this._target.gtween_count--;
          }

          let twIdx = TweenManager.TweenList.indexOf(this);

          if (twIdx != -1) {
            TweenManager.TweenList.splice(twIdx, 1);
          }

          this.reset();
        }

        reset() {
          if (!this._isStart) return;

          if (this.timeIndex != -1) {
            clearInterval(this.timeIndex);
            this.timeIndex = -1;
          }

          this._stepIdx = 0;
          this._loop = false;
          this._onChangeObj = null;
          this._onChange = null;
          this._initialProps = {};
          this._target = null;
          this._steps = null;
          this._curStep = null;
          this._lastStep = null;
          this._isStart = false;

          if (TweenManager.TweenPool.indexOf(this) == -1) {
            TweenManager.TweenPool.push(this);
          }
        }

      };

      _export("default", TweenManager = class TweenManager {
        static getTween() {
          return TweenManager.TweenPool.shift() || new GTween();
        }

        static addTween(target, props) {
          let tw = TweenManager.getTween();
          tw.setTarget(target);
          tw.setProps(props);

          if (!target.gtween_count) {
            target.gtween_count = 0;
          }

          target.gtween_count++;
          TweenManager.TweenList.push(tw); // console.log("当前缓动数量：",TweenManager.TweenList.length,"缓动池数量：",TweenManager.TweenPool.length);

          return tw;
        }

        static removeTweens(target) {
          if (!target.gtween_count || target.gtween_count == 0) return;
          let tws = TweenManager.TweenList;

          for (let i = tws.length - 1; i >= 0; i--) {
            if (tws[i].getTarget() == target) {
              tws[i].reset();
              tws.splice(i, 1);
            }
          }

          target.gtween_count = 0;
        }

      });

      TweenManager.TweenPool = [];
      TweenManager.TweenList = [];

      _cclegacy._RF.pop();

      _crd = false;
    }
  };
});
//# sourceMappingURL=5450a3b39b7beec18533c47df0bbe9747a1396d0.js.map