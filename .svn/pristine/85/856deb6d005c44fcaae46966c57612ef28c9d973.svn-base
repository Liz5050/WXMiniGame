System.register(["__unresolved_0", "cc", "__unresolved_1", "__unresolved_2", "__unresolved_3"], function (_export, _context) {
  "use strict";

  var _reporterNs, _cclegacy, __checkObsolete__, __checkObsoleteInNamespace__, _decorator, Component, EventManager, EventEnum, GameType, _dec, _class, _crd, ccclass, property, MainMenu;

  function _reportPossibleCrUseOfEventManager(extras) {
    _reporterNs.report("EventManager", "../manager/EventManager", _context.meta, extras);
  }

  function _reportPossibleCrUseOfEventEnum(extras) {
    _reporterNs.report("EventEnum", "../enum/EventEnum", _context.meta, extras);
  }

  function _reportPossibleCrUseOfGameType(extras) {
    _reporterNs.report("GameType", "../enum/GameType", _context.meta, extras);
  }

  return {
    setters: [function (_unresolved_) {
      _reporterNs = _unresolved_;
    }, function (_cc) {
      _cclegacy = _cc.cclegacy;
      __checkObsolete__ = _cc.__checkObsolete__;
      __checkObsoleteInNamespace__ = _cc.__checkObsoleteInNamespace__;
      _decorator = _cc._decorator;
      Component = _cc.Component;
    }, function (_unresolved_2) {
      EventManager = _unresolved_2.EventManager;
    }, function (_unresolved_3) {
      EventEnum = _unresolved_3.EventEnum;
    }, function (_unresolved_4) {
      GameType = _unresolved_4.GameType;
    }],
    execute: function () {
      _crd = true;

      _cclegacy._RF.push({}, "d69f70BV2NEjagxbAXhqwVL", "MainMenu", undefined);

      __checkObsolete__(['_decorator', 'Button', 'Component', 'Node']);

      ({
        ccclass,
        property
      } = _decorator);

      _export("MainMenu", MainMenu = (_dec = ccclass('MainMenu'), _dec(_class = class MainMenu extends Component {
        constructor(...args) {
          super(...args);
          this._homeEntity = void 0;
          this._gameState = void 0;
        }

        update(deltaTime) {}

        start() {
          (_crd && EventManager === void 0 ? (_reportPossibleCrUseOfEventManager({
            error: Error()
          }), EventManager) : EventManager).addListener((_crd && EventEnum === void 0 ? (_reportPossibleCrUseOfEventEnum({
            error: Error()
          }), EventEnum) : EventEnum).OnGameExit, this.OnGameExit, this);
          this._homeEntity = GameUI.FindChild(this.entity, "Home");
          let self = this;
          let btnShulte = this.node.getChildByName("Home/btnShulte");
          GameUI.FindChild(this.entity, "Home/btnShulte", engine.UIButton);

          this._btnShulte.onClick.add(function () {
            self.OnStartGame((_crd && GameType === void 0 ? (_reportPossibleCrUseOfGameType({
              error: Error()
            }), GameType) : GameType).Shulte);
          });

          let btnGridGame = GameUI.FindChild(this.entity, "Home/btnGridGame", engine.UIButton);
          btnGridGame.onClick.add(function () {
            self.OnStartGame((_crd && GameType === void 0 ? (_reportPossibleCrUseOfGameType({
              error: Error()
            }), GameType) : GameType).Grid);
            Mgr.soundMgr.play("game_start");
          });
          this.SetGameState(GameState.Home);
        }

        OnStartGame(type) {
          if (this._gameState == GameState.Playing) {
            return;
          }

          this.SetGameState(GameState.Playing);
          (_crd && EventManager === void 0 ? (_reportPossibleCrUseOfEventManager({
            error: Error()
          }), EventManager) : EventManager).dispatch((_crd && EventEnum === void 0 ? (_reportPossibleCrUseOfEventEnum({
            error: Error()
          }), EventEnum) : EventEnum).OnGameStart, type);
        }

        OnGameExit() {
          this.SetGameState(GameState.Home);
        }

        SetGameState(state) {
          if (state == GameState.Home) {
            this.node.active = true;
          } else if (state == GameState.Playing) {
            this.node.active = false;
          }
        }

      }) || _class));

      _cclegacy._RF.pop();

      _crd = false;
    }
  };
});
//# sourceMappingURL=5d63bcd885c0cbe91f5b2244cc34fa551a3373e0.js.map