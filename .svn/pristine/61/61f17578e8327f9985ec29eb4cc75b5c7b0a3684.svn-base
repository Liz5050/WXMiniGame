import { _decorator, Button, Component, Node, NodeEventType, Toggle } from 'cc';
import { EventManager } from '../manager/EventManager';
import { EventEnum } from '../enum/EventEnum';
import { GameType } from '../enum/GameType';
import { GameState } from '../enum/GameState';
import Mgr from '../manager/Mgr';
const { ccclass, property } = _decorator;

@ccclass('MainMenu')
export class MainMenu extends Component {
    private _gameState:GameState;
    update(deltaTime: number) {
        
    }

    public start(){
        EventManager.addListener(EventEnum.OnGameExit,this.OnGameExit,this);

        let self = this;
        let muteToggle:Toggle = this.node.getChildByName("muteToggle").getComponent(Toggle);
        let soundNormal:Node = muteToggle.node.getChildByName("normal");
        muteToggle.node.on(Toggle.EventType.TOGGLE,function(){
            soundNormal.active = !muteToggle.isChecked;
            Mgr.soundMgr.setMute(muteToggle.isChecked);
        });

        let btnShulte = this.node.getChildByName("btnShulte");
        btnShulte.on(Button.EventType.CLICK,function(){
            self.OnStartGame(GameType.Shulte);
        });
        let btnGridGame = this.node.getChildByName("btnGrid");
        btnGridGame.on(Button.EventType.CLICK,function(){
            self.OnStartGame(GameType.Grid);
            Mgr.soundMgr.play("game_start");
        });

        let btnMemory = this.node.getChildByName("btnMemory");
        btnMemory.on(Button.EventType.CLICK,function(){
            // self.OnStartGame(GameType.Memory);
            wx.showToast({
                title: `暂未开放`,
                icon: 'none',
                duration: 2000
            });
        });
        let btnRank = this.node.getChildByName("btnRank");
        btnRank.on(Button.EventType.CLICK,function(){
            wx.showToast({
                title: `暂无排名`,
                icon: 'none',
                duration: 2000
            });
        });

        
        this.SetGameState(GameState.Home);
    }

    private OnStartGame(type:GameType){
        if(this._gameState == GameState.Playing){
            return;
        }
        this.SetGameState(GameState.Playing);
        EventManager.dispatch(EventEnum.OnGameStart,type);
    }

    private OnGameExit(){
        this.SetGameState(GameState.Home);
    }

    private SetGameState(state:GameState){
        if(state == GameState.Home){
            this.node.active = true;
        }
        else if(state == GameState.Playing){
            this.node.active = false;
        }
    }
}



