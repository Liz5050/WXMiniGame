System.register(["__unresolved_0", "cc", "__unresolved_1", "__unresolved_2"], function (_export, _context) {
  "use strict";

  var _reporterNs, _cclegacy, __checkObsolete__, __checkObsoleteInNamespace__, _decorator, Button, Component, EventManager, EventEnum, _dec, _class, _crd, ccclass, property, BaseView;

  function _reportPossibleCrUseOfEventManager(extras) {
    _reporterNs.report("EventManager", "../../manager/EventManager", _context.meta, extras);
  }

  function _reportPossibleCrUseOfEventEnum(extras) {
    _reporterNs.report("EventEnum", "../../enum/EventEnum", _context.meta, extras);
  }

  function _reportPossibleCrUseOfGameType(extras) {
    _reporterNs.report("GameType", "../../enum/GameType", _context.meta, extras);
  }

  return {
    setters: [function (_unresolved_) {
      _reporterNs = _unresolved_;
    }, function (_cc) {
      _cclegacy = _cc.cclegacy;
      __checkObsolete__ = _cc.__checkObsolete__;
      __checkObsoleteInNamespace__ = _cc.__checkObsoleteInNamespace__;
      _decorator = _cc._decorator;
      Button = _cc.Button;
      Component = _cc.Component;
    }, function (_unresolved_2) {
      EventManager = _unresolved_2.EventManager;
    }, function (_unresolved_3) {
      EventEnum = _unresolved_3.EventEnum;
    }],
    execute: function () {
      _crd = true;

      _cclegacy._RF.push({}, "16409XXoOFIRpLEVNYL+xsp", "BaseView", undefined);

      __checkObsolete__(['_decorator', 'Button', 'Component', 'Node']);

      ({
        ccclass,
        property
      } = _decorator);

      _export("BaseView", BaseView = (_dec = ccclass('BaseView'), _dec(_class = class BaseView extends Component {
        constructor(...args) {
          super(...args);
          this._gameType = void 0;
        }

        start() {
          this.initUI();
        }

        update(deltaTime) {}

        initUI() {
          let self = this;
          let btnExit = this.node.getChildByName("btnExit");

          if (btnExit) {
            btnExit.on(Button.EventType.CLICK, function () {
              //退出前回到初始化状态
              self.node.active = false;
              (_crd && EventManager === void 0 ? (_reportPossibleCrUseOfEventManager({
                error: Error()
              }), EventManager) : EventManager).dispatch((_crd && EventEnum === void 0 ? (_reportPossibleCrUseOfEventEnum({
                error: Error()
              }), EventEnum) : EventEnum).OnGameExit, this._gameType);
            });
          }

          this.initSubUI();
        }

        initSubUI() {}

      }) || _class));

      _cclegacy._RF.pop();

      _crd = false;
    }
  };
});
//# sourceMappingURL=5bd939c6f5eb9d71e74ef73a6f09945e810847d9.js.map