System.register(["__unresolved_0", "cc", "__unresolved_1"], function (_export, _context) {
  "use strict";

  var _reporterNs, _cclegacy, __checkObsolete__, __checkObsoleteInNamespace__, _decorator, Component, Mgr, BtnType, _dec, _class, _class2, _crd, ccclass, property, GameShulteBeginView;

  function _reportPossibleCrUseOfMgr(extras) {
    _reporterNs.report("Mgr", "../../../manager/Mgr", _context.meta, extras);
  }

  return {
    setters: [function (_unresolved_) {
      _reporterNs = _unresolved_;
    }, function (_cc) {
      _cclegacy = _cc.cclegacy;
      __checkObsolete__ = _cc.__checkObsolete__;
      __checkObsoleteInNamespace__ = _cc.__checkObsoleteInNamespace__;
      _decorator = _cc._decorator;
      Component = _cc.Component;
    }, function (_unresolved_2) {
      Mgr = _unresolved_2.default;
    }],
    execute: function () {
      _crd = true;

      _cclegacy._RF.push({}, "c39d5TdjhVK8aXLBveloeCk", "GameShulteBeginView", undefined);

      __checkObsolete__(['_decorator', 'Component', 'Node']);

      ({
        ccclass,
        property
      } = _decorator);

      _export("GameShulteBeginView", GameShulteBeginView = (_dec = ccclass('GameShulteBeginView'), _dec(_class = (_class2 = class GameShulteBeginView extends Component {
        constructor(...args) {
          super(...args);
          this._itemContainer = void 0;
          this._beginEntity = void 0;
          this._gameStartEntity = void 0;
          this._beginAnim = void 0;
          this._gameStart = void 0;
          this._curTypeIdx = -1;
          this._num = void 0;
          this._btns = [];
          this._itemEntitys = [];
          this._typeList = [3, 4, 5, 6, 7, 8];
          this._isStart = false;
        }

        update(deltaTime) {}

        start() {
          console.log("onStart");
          this._gameStart = this.getComponent(GameShulteStart);
          let self = this;
          let muteToggle = GameUI.FindChild(this.entity, "MuteToggle", engine.UIToggle);
          let soundNormal = GameUI.FindChild(muteToggle.entity, "Normal"); //this.entity.transform2D.findChildByName("MuteToggle/Normal").entity;

          muteToggle.onClick.add(function (comp, event) {
            soundNormal.active = !muteToggle.isChecked;
            (_crd && Mgr === void 0 ? (_reportPossibleCrUseOfMgr({
              error: Error()
            }), Mgr) : Mgr).soundMgr.setMute(muteToggle.isChecked);
          });
          this._gameStartEntity = GameUI.FindChild(this.entity, "GameStart");
          this._gameStartEntity.active = false;
          this._beginEntity = GameUI.FindChild(this.entity, "Begin");
          this._beginEntity.active = true;
          this._itemContainer = GameUI.FindChild(this.entity, "Begin/Group/GridGroup").transform2D;

          for (let i = 0; i < this._typeList.length; i++) {
            let type = this._typeList[i];
            let btn = new BtnType();
            let btnEntity = GameUI.FindChild(this.entity, "Begin/TypeGroup/btns/btnType" + (i + 1));
            btn.init(btnEntity, type, i);
            let btnCom = btnEntity.getComponent(engine.UIButton);
            btnCom.onClick.add(function () {
              self.setIndex(i);
            });

            this._btns.push(btn);
          }

          let btnStart = GameUI.FindChild(this.entity, "Begin/Group/btnStart", engine.UIButton);
          btnStart.onClick.add(function () {
            self.OnStartClick();
          });
          let btnExit = GameUI.FindChild(this.entity, "Begin/btnExit", engine.UIButton);
          btnExit.onClick.add(function () {
            //退出前回到初始化状态
            self.setIndex(0);
            self.entity.active = false;
            EventManager.dispatch(EventEnum.OnGameExit, GameType.Shulte);
          });
          this.setIndex(0);
        }

        OnStartClick() {
          if (this._isStart) return;
          console.log("开始游戏");
          this._gameStartEntity.active = true;
          this._beginEntity.active = false;

          this._gameStart.startGame(this._typeList[this._curTypeIdx]);

          this._isStart = true;
        }

        gameExit() {
          this._isStart = false;
        }

        setIndex(index) {
          if (this._curTypeIdx == index) return;

          if (this._curTypeIdx >= 0) {
            this.clearShowGrid();

            this._btns[this._curTypeIdx].setSelected(false);
          }

          this._curTypeIdx = index;

          this._btns[index].setSelected(true);

          let curType = this._typeList[index];
          this._num = curType * curType;
          let url = 'Resources/Prefabs/ItemShowGrid.prefab';

          if (engine.loader.getAsset(url)) {
            this.updateShowGrid();
          } else {
            let self = this;
            engine.loader.load(url).promise.then(prefabAsset => {
              // 将 prefab 资源实例化
              console.log("#######加载成功");
              self.updateShowGrid();
            });
          }
        }

        updateShowGrid() {
          let curType = this._typeList[this._curTypeIdx];
          let width = this._itemContainer.sizeX; // let offset = this._systemInfo.screenWidth / 1080;

          let curSize = Math.floor(width / curType); // * offset;

          for (let i = 0; i < this._num; i++) {
            if (!this.canShowGrid(i)) continue;
            let itemEntity = this.getShowItemGrid();
            itemEntity.active = true;

            this._itemContainer.addChild(itemEntity.transform2D);

            itemEntity.transform2D.sizeX = curSize;
            itemEntity.transform2D.sizeY = curSize;
            let col = i % curType;
            let row = Math.floor(i / curType);
            let x = col * curSize;
            let y = row * -curSize;
            itemEntity.transform2D.position.x = x;
            itemEntity.transform2D.position.y = y;
            itemEntity.getComponent(ItemGrid).setIndex(i);

            this._itemEntitys.push(itemEntity);
          }
        }

        getShowItemGrid() {
          let entity = GameShulteBegin.ITEM_POOL.pop();

          if (!entity) {
            let prefabAsset = engine.loader.getAsset("Resources/Prefabs/ItemShowGrid.prefab");

            if (prefabAsset) {
              entity = prefabAsset.instantiate();
            } else {
              console.log("找不到资源");
            }
          }

          return entity;
        }

        clearShowGrid() {
          for (let i = 0; i < this._itemEntitys.length; i++) {
            let entity = this._itemEntitys[i];
            entity.active = false;
            GameShulteBegin.ITEM_POOL.push(entity);
          }

          this._itemEntitys = [];
        }

        canShowGrid(index) {
          let curType = this._typeList[this._curTypeIdx];

          if (curType == 3) {
            return index != 4;
          }

          if (curType == 4) {
            return index != 5 && index != 6 && index != 9 && index != 10;
          }

          if (curType == 5) {
            return (index < 6 || index > 8) && (index < 11 || index > 13) && (index < 16 || index > 18);
          }

          if (curType == 6) {
            return index != 14 && index != 15 && index != 20 && index != 21;
          }

          if (curType == 7) {
            return (index < 16 || index > 18) && (index < 23 || index > 25) && (index < 30 || index > 32);
          }

          return (index < 18 || index > 21) && (index < 26 || index > 29) && (index < 34 || index > 37) && (index < 42 || index > 45);
        }

      }, _class2.ITEM_POOL = new Array(), _class2)) || _class));

      BtnType = class BtnType {
        constructor() {
          this._isSelected = void 0;
          this._index = void 0;
          this._type = void 0;
          this._itemEntity = void 0;
          this._normalEntity = void 0;
          this._selectedEntity = void 0;
          this._btnItem = void 0;
        }

        consturctor() {}

        init(entity, type, index) {
          this._itemEntity = entity;
          this._type = type;
          this._index = index;
          this.initUI();
        }

        initUI() {
          this._normalEntity = GameUI.FindChild(this._itemEntity, "normal");
          this._selectedEntity = GameUI.FindChild(this._itemEntity, "selected");
          let txtType = GameUI.FindChild(this._itemEntity, "txtType", engine.UILabel);
          txtType.text = this._type + "X" + this._type;
          this._btnItem = GameUI.FindChild(this._itemEntity, "", engine.UIButton);
        }

        setSelected(isSelected) {
          if (this._isSelected == isSelected) {
            return;
          }

          this._normalEntity.active = !isSelected;
          this._selectedEntity.active = isSelected;
          this._isSelected = isSelected;
        }

      };

      _cclegacy._RF.pop();

      _crd = false;
    }
  };
});
//# sourceMappingURL=501f369ff2dbba28e547d69a3493b2c60378e85e.js.map