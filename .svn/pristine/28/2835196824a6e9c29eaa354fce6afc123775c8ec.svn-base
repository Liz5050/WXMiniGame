System.register(["__unresolved_0", "cc", "__unresolved_1", "__unresolved_2"], function (_export, _context) {
  "use strict";

  var _reporterNs, _cclegacy, EventEnum, EventManager, GameShulteController, _crd;

  function _reportPossibleCrUseOfGameType(extras) {
    _reporterNs.report("GameType", "../../Enum/GameType", _context.meta, extras);
  }

  function _reportPossibleCrUseOfEventEnum(extras) {
    _reporterNs.report("EventEnum", "../../enum/EventEnum", _context.meta, extras);
  }

  function _reportPossibleCrUseOfEventManager(extras) {
    _reporterNs.report("EventManager", "../../manager/EventManager", _context.meta, extras);
  }

  _export("default", void 0);

  return {
    setters: [function (_unresolved_) {
      _reporterNs = _unresolved_;
    }, function (_cc) {
      _cclegacy = _cc.cclegacy;
    }, function (_unresolved_2) {
      EventEnum = _unresolved_2.EventEnum;
    }, function (_unresolved_3) {
      EventManager = _unresolved_3.EventManager;
    }],
    execute: function () {
      _crd = true;

      _cclegacy._RF.push({}, "daa42tKp1BHCoqIkL8HDt2r", "GameShulteController", undefined);

      _export("default", GameShulteController = class GameShulteController {
        constructor() {
          this.init();
        }

        init() {
          (_crd && EventManager === void 0 ? (_reportPossibleCrUseOfEventManager({
            error: Error()
          }), EventManager) : EventManager).addListener((_crd && EventEnum === void 0 ? (_reportPossibleCrUseOfEventEnum({
            error: Error()
          }), EventEnum) : EventEnum).OnGameStart, this.onGameStart, this);
        }

        onGameStart(type) {}

      });

      _cclegacy._RF.pop();

      _crd = false;
    }
  };
});
//# sourceMappingURL=f1c529b24fde16568d9360d6a4a42a923eb7cb9b.js.map