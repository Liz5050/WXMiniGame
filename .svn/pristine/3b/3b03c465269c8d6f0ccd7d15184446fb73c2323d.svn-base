System.register(["__unresolved_0", "cc", "__unresolved_1", "__unresolved_2", "__unresolved_3"], function (_export, _context) {
  "use strict";

  var _reporterNs, _cclegacy, __checkObsolete__, __checkObsoleteInNamespace__, GameType, EventEnum, EventManager, resources, GameGridController, _crd;

  function _reportPossibleCrUseOfGameType(extras) {
    _reporterNs.report("GameType", "../../enum/GameType", _context.meta, extras);
  }

  function _reportPossibleCrUseOfEventEnum(extras) {
    _reporterNs.report("EventEnum", "../../enum/EventEnum", _context.meta, extras);
  }

  function _reportPossibleCrUseOfEventManager(extras) {
    _reporterNs.report("EventManager", "../../manager/EventManager", _context.meta, extras);
  }

  _export("default", void 0);

  return {
    setters: [function (_unresolved_) {
      _reporterNs = _unresolved_;
    }, function (_cc) {
      _cclegacy = _cc.cclegacy;
      __checkObsolete__ = _cc.__checkObsolete__;
      __checkObsoleteInNamespace__ = _cc.__checkObsoleteInNamespace__;
      resources = _cc.resources;
    }, function (_unresolved_2) {
      GameType = _unresolved_2.GameType;
    }, function (_unresolved_3) {
      EventEnum = _unresolved_3.EventEnum;
    }, function (_unresolved_4) {
      EventManager = _unresolved_4.EventManager;
    }],
    execute: function () {
      _crd = true;

      _cclegacy._RF.push({}, "59f13/t6UNLnJ1PSQSruRSx", "GameGridController", undefined);

      __checkObsolete__(['resources', 'Node']);

      _export("default", GameGridController = class GameGridController {
        constructor() {
          this._gameGridEntity = void 0;
          this.init();
        }

        init() {
          (_crd && EventManager === void 0 ? (_reportPossibleCrUseOfEventManager({
            error: Error()
          }), EventManager) : EventManager).addListener((_crd && EventEnum === void 0 ? (_reportPossibleCrUseOfEventEnum({
            error: Error()
          }), EventEnum) : EventEnum).OnGameStart, this.onGameStart, this);
        }

        onGameStart(type) {
          if (type != (_crd && GameType === void 0 ? (_reportPossibleCrUseOfGameType({
            error: Error()
          }), GameType) : GameType).Grid) return;
          var url = "prefab/GameGridMapItem";

          if (resources.get(url)) {
            this.start();
          } else {
            var self = this;
            resources.load(url, function () {
              self.start();
            });
          }
        }

        start() {
          if (!this._gameGridEntity) {
            this._gameGridEntity = GameUI.FindChild(engine.game.activeScene2D.root, "Main/GameManager/GameContainer/GameGrid");
          } else {
            var com = this._gameGridEntity.getComponent(GameGridStart);

            com.OnGameStart();
          }

          this._gameGridEntity.active = true;
        }

      });

      _cclegacy._RF.pop();

      _crd = false;
    }
  };
});
//# sourceMappingURL=c05c976eaa0a5762d1f3b43aac0cb7fd48a046b5.js.map