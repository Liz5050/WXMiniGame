import { _decorator, Button, Component, director, Node, NodeEventType, SubContextView, Toggle } from 'cc';
import { EventManager } from '../manager/EventManager';
import { EventEnum } from '../enum/EventEnum';
import { GameType } from '../enum/GameType';
import { GameState } from '../enum/GameState';
import Mgr from '../manager/Mgr';
import WXSDK from '../SDK/WXSDK';
const { ccclass, property } = _decorator;

@ccclass('MainMenu')
export class MainMenu extends Component {
    private _gameState:GameState;
    update(deltaTime: number) {
        
    }

    public start(){
        EventManager.addListener(EventEnum.OnGameExit,this.OnGameExit,this);

        let self = this;
        let muteToggle:Toggle = this.node.getChildByName("muteToggle").getComponent(Toggle);
        let soundNormal:Node = muteToggle.node.getChildByName("normal");
        muteToggle.node.on(Toggle.EventType.TOGGLE,function(){
            soundNormal.active = !muteToggle.isChecked;
            Mgr.soundMgr.setMute(muteToggle.isChecked);
        });

        let btnShulte = this.node.getChildByName("btnShulte");
        btnShulte.on(Button.EventType.CLICK,function(){
            self.OnStartGame(GameType.Shulte);
        });
        let btnGridGame = this.node.getChildByName("btnGrid");
        btnGridGame.on(Button.EventType.CLICK,function(){
            self.OnStartGame(GameType.Grid);
            Mgr.soundMgr.play("game_start");
        });

        let btnNullify = this.node.getChildByName("btnNullify");
        let clickCount = 0;
        let targetNum = -1;
        btnNullify.on(Button.EventType.CLICK,function(){
            // self.OnStartGame(GameType.Nullify);
            let showTips:string = "你别急，已经在开发中了~";
            clickCount++;
            if(targetNum == -1){
                targetNum = 1 + Math.round(Math.random()*10);
            }
            if(clickCount >= targetNum + 20){
                showTips = "有事？vme50（vx：lizhi5050）";
                clickCount = 0;
                targetNum = 1 + Math.round(Math.random()*10);
            }
            else if(clickCount >= targetNum + 12){
                showTips = "你别急，已经在开发中了~";
            }
            else if(clickCount >= targetNum + 11){
                self.OnStartGame(GameType.Nullify);
            }
            else if(clickCount >= targetNum + 10){
                showTips = "这么期待？给你看一眼？";
            }
            else if(clickCount >= targetNum){
                showTips = "跟你说了别急，你还点什么点？";
            }
            WXSDK.showToast(showTips);
        });
        let openDatacontext = this.node.getChildByName("openDataContext");
        let btnRank = this.node.getChildByName("btnRank");
        btnRank.on(Button.EventType.CLICK,function(){
            openDatacontext.active = true;
            WXSDK.showRank("rank_" + GameType.Shulte);
            // wx.showToast({
            //     title: `暂无排名`,
            //     icon: 'none',
            //     duration: 2000
            // });
        });

        
        let btnClose = openDatacontext.getChildByName("btnClose");
        btnClose.on(Button.EventType.CLICK,function(){
            openDatacontext.active = false;
        });
        let btnShulteRank = openDatacontext.getChildByName("btnShulteRank");
        btnShulteRank.on(Button.EventType.CLICK,function(){
            WXSDK.showRank("rank_" + GameType.Shulte);
        });

        let btnGridRank = openDatacontext.getChildByName("btnGridRank");
        btnGridRank.on(Button.EventType.CLICK,function(){
            WXSDK.showRank("rank_" + GameType.Grid);
        });

        let btnTest = this.node.getChildByName("btnTest");
        btnTest.on(Button.EventType.CLICK,function(){
            Mgr.sceneMgr.LoadScene("sceneTest");
        });

        
        this.SetGameState(GameState.Home);
    }

    private OnStartGame(type:GameType){
        if(this._gameState == GameState.Playing){
            return;
        }
        this.SetGameState(GameState.Playing);
        EventManager.dispatch(EventEnum.OnGameStart,type);
    }

    private OnGameExit(){
        this.SetGameState(GameState.Home);
    }

    private SetGameState(state:GameState){
        if(state == GameState.Home){
            this.node.active = true;
        }
        else if(state == GameState.Playing){
            this.node.active = false;
        }
    }
}



