const style = require('./render/style')
const Layout = require('./engine').default;

let __env = GameGlobal.wx || GameGlobal.tt || GameGlobal.swan;
let sharedCanvas  = __env.getSharedCanvas();
let sharedContext = sharedCanvas.getContext('2d');
let _template = "";
function draw() {
    Layout.clear();
    Layout.init(_template, style);
    Layout.layout(sharedContext);
}

function updateViewPort(data) { 
    Layout.updateViewPort({
        x: data.x,
        y: data.y,
        width: data.width,
        height: data.height,
    });
}

let rankKey = "";
function tryDrawRanks(){
    let dataDemo = {
        data: []
    };
    wx.getFriendCloudStorage({
        keyList: [rankKey],
        success: (res) => {
            console.log("success",res);
            for(let i = 0; i < res.data.length; i++){
                let userData = res.data[i];
                let kv = userData.KVDataList[0];
                let item = {};
                if(kv){
                    let value = JSON.parse(kv.value);
                    item.value = value.wxgame.score;
                    item.order = value.order;
                    item.valueStr = item.value + value.unitStr;
                }
                else{
                    item.value = -1;
                    item.order = 1;//排序，默认从小到大
                    item.valueStr = "暂无记录";
                }
                item.avatarUrl = userData.avatarUrl;
                item.nickname = userData.nickname;
                dataDemo.data.push(item);
            }
            dataDemo.data.sort(function(a, b){
                if(a.value <= 0 && b.value > 0) return 1;
                if(a.value > 0 && b.value <= 0) return -1;
                //排序，1从小到大
                if(a.order == 1) return a.value - b.value;
                //排序，2从大到小
                return b.value - a.value;
            });
            _template = getTempStr(dataDemo);
            draw();
        },
        fail: (res) => {
            console.log("fail",res);
        }
    });
}

function getTempStr(it) { 
    var out = '<view class="container" id="main"> <view class="header"> <text class="title" value="排行榜"></text> </view> <view class="rankList"> <scrollview class="list" scrollY="true"> ';
    var arr1 = it.data;
    if(arr1){
        var item;
        for(let i = 0; i < arr1.length; i++){
            if(i >= 20) break;
            item = arr1[i];
            out += ' ';
            if(i % 2 === 1){
                out += ' <view class="listItem listItemOld"> ';
            }
            out += ' ';
            if(i % 2 === 0){
                out += ' <view class="listItem"> ';
            }
            out += ' <view id="listItemUserData"> <text class="listItemNum" value="' + 
            ( i + 1) + '"></text> <image class="listHeadImg" src="' + 
            ( item.avatarUrl ) + '"></image> <text class="listItemName" value="' +
            ( item.nickname) + '"></text> </view> <text class="listItemScore" value="' +
            ( item.valueStr) + ' "></text> </view> ';
        }
    } 
    out +=' </scrollview> <text class="listTips" value="仅展示前 20 位好友排名"></text> </view></view>';
    return out; 
}

function compareScore(kvData) {
    let key = kvData.key;
    let value = kvData.value;
    wx.getUserCloudStorage({
        keyList: [key],
        success: (res) => {
            if (res.KVDataList.length > 0) {
                let userData = res.KVDataList[0];
                let storedValue = 0;
                if(userData){
                    let userValue = JSON.parse(userData.value);
                    storedValue = userValue.wxgame.score;
                }
                if(value.order == 1){
                    //排序，1从小到大，历史最低才更新记录
                    if (value.wxgame.score < storedValue) {
                        setNewCloudScore(kvData);
                    }
                }
                else{
                    //排序，2从大到小，历史最高才更新记录
                    if (value.wxgame.score > storedValue) {
                        setNewCloudScore(kvData);
                    }
                }
            }
            else {
                setNewCloudScore(kvData);
            }
        },
        fail: (res) => {
            console.log(res);
        }
    });
}
function setNewCloudScore(newKVData) {
    let jsonStr = JSON.stringify(newKVData.value);
    newKVData.value = jsonStr;
    //调用wx.setUserCloudStorage()方法上传云托管分数。
    wx.setUserCloudStorage({
        KVDataList: [newKVData],
        success(res) {
            console.log("[WxPlatform] 保存用户数据成功:", newKVData);
        },
        fail(res) {
            console.log("[WxPlatform] 保存用户数据失败:", newKVData,res);
        }
    });
}

__env.onMessage(data => {
    // if ( data.type === 'engine' && data.event === 'viewport' ) {
    if ( data.type === "ShowRank" ) {
        rankKey = data.rankKey;
        updateViewPort(data);
        tryDrawRanks();
        // draw();
    }
    else if(data.type === "UploadScore"){
        let KVData = data.KVData;
        compareScore(KVData);
    }   
});
